rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is customer
    function isCustomer() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/userRoles/$(request.auth.uid)).data.role == 'customer';
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // User Roles Collection
    match /userRoles/{userId} {
      // Users can read their own role, admins can read all
      allow read: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      
      // Users can create their own role during signup, admins can create any
      allow create: if isAuthenticated() && (request.auth.uid == userId || isAdmin());
      
      // Only admins can update or delete user roles
      allow update, delete: if isAdmin();
    }
    
    // Challenges Collection
    match /challenges/{challengeId} {
      // Anyone authenticated can read active challenges
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete challenges
      allow create, update, delete: if isAdmin();
    }
    
    // Quizzes Collection
    match /quizzes/{quizId} {
      // Anyone authenticated can read active quizzes
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete quizzes
      allow create, update, delete: if isAdmin();
    }
    
    // Challenge Participations Collection
    match /challengeParticipations/{participationId} {
      // Users can read their own participations
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.userId || isAdmin());
      
      // Admins can read all participations
      allow read: if isAdmin();
      
      // Users can create their own participations
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      // Only admins can update or delete participations (for approval/rejection)
      allow update, delete: if isAdmin();
    }
    
    // E-Waste Reports Collection
    match /ewasteReports/{reportId} {
      // Users can read their own reports, admins can read all
      allow read: if isAuthenticated() && 
                     (resource.data.userId == request.auth.uid || isAdmin());
      
      // Users can create reports with their own userId
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.reportedBy == request.auth.uid;
      
      // Only admins can update reports (for status changes)
      allow update: if isAdmin();
      
      // Only admins can delete reports
      allow delete: if isAdmin();
    }
    
    // Quiz Submissions Collection (if you add this feature later)
    match /quizSubmissions/{submissionId} {
      // Users can read their own submissions
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.userId || isAdmin());
      
      // Admins can read all submissions
      allow read: if isAdmin();
      
      // Users can create their own submissions
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      // Only admins can update or delete submissions
      allow update, delete: if isAdmin();
    }
    
    // User Statistics Collection (if you add this feature later)
    match /userStats/{userId} {
      // Users can read their own stats
      allow read: if isAuthenticated() && request.auth.uid == userId;
      
      // Admins can read all stats
      allow read: if isAdmin();
      
      // Users can update their own stats
      allow update: if isAuthenticated() && request.auth.uid == userId;
      
      // Admins can update any stats
      allow update: if isAdmin();
      
      // Stats are created automatically
      allow create: if isAuthenticated();
    }
    
    // Rewards Collection
    match /rewards/{rewardId} {
      // Everyone can read active rewards
      allow read: if isAuthenticated();
      
      // Only admins can create, update, or delete rewards
      allow create, update, delete: if isAdmin();
    }
    
    // Reward Redemptions Collection
    match /rewardRedemptions/{redemptionId} {
      // Users can read their own redemptions
      allow read: if isAuthenticated() && 
                     (request.auth.uid == resource.data.userId || isAdmin());
      
      // Admins can read all redemptions
      allow read: if isAdmin();
      
      // Users can create their own redemptions
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
      
      // Only admins can update redemptions (for status changes)
      allow update: if isAdmin();
      
      // Only admins can delete redemptions
      allow delete: if isAdmin();
    }
    
    // Leaderboard Collection
    match /leaderboard/{entryId} {
      // Everyone can read the leaderboard
      allow read: if isAuthenticated();
      
      // Only admins can write to leaderboard
      allow write: if isAdmin();
    }
    
    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
